
#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;
const int MAX = 11111;
int parent[MAX];
struct Edge
{
    int st;
    int ed;
    int cost;
    bool operator<(const Edge &rhs)const
    {
        return cost < rhs.cost;
    }
};
Edge E[222222];
int find(int r)
{
    if(parent[r] == r)
        return r;
    return parent[r] = find(parent[r]);
}
void input(int &x)
{
    char ch = getchar();
    bool flag = ch == '-';
    while(ch<'0' || ch>'9')
    {
        ch = getchar();
        if(ch == '-')
            flag = true;
    }
    x = 0;
    while(ch>='0' && ch<='9')
    {
        x = x * 10 + ch - '0';
        ch = getchar();
    }
    x = flag?-x:x;
}
int weight;
int num;
int tmp_cost;
int cnt ;
void kruskal(int n, int m)
{
	int i = 0;
    for( i=0;i<=n;++i)
        parent[i] = i;

    for(i=0;i<m;++i)
    {
        int x = E[i].st;
        int y = E[i].ed;
        int rx = find(x);
        int ry = find(y);
        if(rx != ry)
        {
            parent[rx] = ry;
            cnt++;
            if(x==0)
             {
                 num++;
                 tmp_cost = E[i].cost;
             }
             weight+=E[i].cost;

        }
        else if(E[i].cost<0)
            weight += E[i].cost;

    }
    if(num==1)
        weight -= tmp_cost;
}
int main()
{
    //freopen("in.txt","r",stdin);
    int n,m;
    int cost;
    input(n);
    input(m);
    //scanf("%d%d",&n,&m);
    int i;
    for( i=0;i<m;++i)
    {
        input(E[i].st);
        input(E[i].ed);
        input(E[i].cost);
        //scanf("%d%d%d",&E[i].st,&E[i].ed,&E[i].cost);
        //if(E[i].cost<0)
            //weight+=E[i].cost;
    }
    sort(E,E+m);
    kruskal(n,m);
    for( i=1;i<=n;++i)
    {
        input(cost);
       //scanf("%d",&cost);
       if(cost!=-1)
       {
           E[m].st = 0;
           E[m].ed = i;
           E[m++].cost = cost;
       }
    }
    if(cnt==n-1)
    {
        int minWeight = weight;
        weight = 0;
        sort(E,E+m);
        kruskal(n,m);
        minWeight = minWeight < weight?minWeight:weight;
        cout<<minWeight<<endl;
    }
    else
    {
        weight = 0;
        sort(E,E+m);
        kruskal(n,m);
        cout<<weight<<endl;
    }

}


