
/**************Powered by Graphene Richards**************/
//{

#define OUTPUT_PRECISION    "%.2f"
#define LF_PRECISION        10
#define INT_64_MOD          "%I64d"
#define UNSIGNED_64_MOD     "%I64u"

//#pragma comment(linker,"/STACK:102400000,102400000")
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<bitset>
#include<complex>
#include<vector>
#include<iomanip>
#include<iostream>
#include<list>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<typeinfo>
#define FAST_RW ios_base::sync_with_stdio(0),cin.tie(0);
#define IT(x) __typeof((x).begin())
#define FS(i,a) for(ll i=0;a[i];i++)
#define FE(x,ctn) for(IT(ctn)x=(ctn).begin(),CluhxSchFuDeugk=(ctn).end();x!=CluhxSchFuDeugk;x++)
#define FR(i,en) for(ll i=0,pJNwFPtlXiwFoIv=(en);i<pJNwFPtlXiwFoIv;i++)
#define FOR(i,en) for(ll i=1,SbKCIcakJTeYVqs=(en);i<=SbKCIcakJTeYVqs;i++)
#define FFR(i,x,y) for(ll i=(x),alVDbhLBoMEGSwA=(y);i<=alVDbhLBoMEGSwA;i++)
#define DFFR(i,x,y) for(ll i=(x),NWYfecAcmGBMJuU=(y);i>=NWYfecAcmGBMJuU;i--)
#define ll long long
#define ull unsigned long long
#define lf long double
#define pc putchar
#define mp make_pair
#define pb push_back
#define pq priority_queue
#define fi first
#define se second
#define pii pair<int,int>
#define pdd pair<double,double>
#define lb(x) (x&(-x))
#define sqr(x) (x)*(x)
#define all(x) (x).begin(),(x).end()
#define clr(x) memset((x),0,sizeof(x))
#define ms(x,v) memset((x),(v),sizeof(x))
#define mc(x,y) memcpy((x),(y),sizeof(y))
#define NL puts("");
#define fin(x,c) ((c).find(x)!=(c).end())
using namespace std;

template<class T1,class T2,class T3>
bool _IN(T1 x,T2 y,T3 z){
  return x<=y&&x>=z||x<=z&&x>=y;
}

ull gcd(ull a,ull b){
  if(!b)return a;
  while(b^=a^=b^=a%=b);
  return a;
}

#ifdef wmx16835
#define NOT_TESTING_TEMPLATE_CPP
#include"wmx16835.cpp"

#else
int ebtpqJsBCnTgggi;
#define LOG {
#define TEL }
#define SHOW_TIME
#define test(...) ebtpqJsBCnTgggi
#define TEST(...) ebtpqJsBCnTgggi
#define TRY(...)
#define PF
#define PP ;
#endif

bool S(char*a){
  return scanf("%s",a)==1;
}

char DATaJNTFnlmAoya[2];

template<class T>
bool S(T&a){
  const char*x=typeid(a).name();
  if(!strcmp(x,"i")||!strcmp(x,"b"))return scanf("%d",&a)==1;
  else if(!strcmp(x,"j"))return scanf("%u",&a)==1;
  else if(!strcmp(x,"c")){
    if(scanf("%1s",DATaJNTFnlmAoya)==-1)
      return 0;
    a=*DATaJNTFnlmAoya;
    return 1;
  }
  else if(!strcmp(x,"Pc")||*x=='A')return scanf("%s",a)==1;
  else if(!strcmp(x,"f"))return scanf("%f",&a)==1;
  else if(!strcmp(x,"d"))return scanf("%lf",&a)==1;
  else if(!strcmp(x,"x"))return scanf(INT_64_MOD,&a)==1;
  else if(!strcmp(x,"y"))return scanf(UNSIGNED_64_MOD,&a)==1;
  else if(!strcmp(x,"e"))return (cin>>a)!=0;
  else test("Input format error!\n");
}

void _P(string x){
  printf("%s",x.c_str());
}

template<class T>
void _P(T a){
  const char*x=typeid(a).name();
  if(!strcmp(x,"i")||!strcmp(x,"b"))printf("%d",a);
  else if(!strcmp(x,"j"))printf("%u",a);
  else if(!strcmp(x,"c"))printf("%c",a);
  else if(!strcmp(x,"Pc")||!strcmp(x,"PKc")||*x=='A')printf("%s",a);
  else if(!strcmp(x,"d")||!strcmp(x,"f"))printf(OUTPUT_PRECISION,a);
  else if(!strcmp(x,"x"))printf(INT_64_MOD,a);
  else if(!strcmp(x,"y"))printf(UNSIGNED_64_MOD,a);
  else if(!strcmp(x,"e"))cout<<setprecision(LF_PRECISION)<<a;
  else test("Output format error!\n");
}

template<class T1,class T2>
bool S(T1&a,T2&b){
  return S(a)+S(b)==2;
}

template<class T1,class T2,class T3>
bool S(T1&a,T2&b,T3&c){
  return S(a)+S(b)+S(c)==3;
}

template<class T1,class T2,class T3,class T4>
bool S(T1&a,T2&b,T3&c,T4&d){
  return S(a)+S(b)+S(c)+S(d)==4;
}

template<class T1,class T2,class T3,class T4,class T5>
bool S(T1&a,T2&b,T3&c,T4&d,T5&e){
  return S(a)+S(b)+S(c)+S(d)+S(e)==5;
}

template<class T>
void P(T a){
  _P(a);
  pc(' ');
}

template<class T1,class T2>
void P(T1 a,T2 b){
  _P(a);pc(' ');
  _P(b);pc(' ');
}

template<class T>
void PN(T a){
  _P(a);
  NL
}

template<class T1,class T2>
void PN(T1 a,T2 b){
  _P(a);pc(' ');
  _P(b);NL
}

template<class T1,class T2,class T3>
void PN(T1 a,T2 b,T3 c){
  _P(a);pc(' ');
  _P(b);pc(' ');
  _P(c);NL
}

template<class T1,class T2,class T3,class T4>
void PN(T1 a,T2 b,T3 c,T4 d){
  _P(a);pc(' ');
  _P(b);pc(' ');
  _P(c);pc(' ');
  _P(d);NL
}

template<class T1,class T2,class T3,class T4,class T5>
void PN(T1 a,T2 b,T3 c,T4 d,T5 e){
  _P(a);pc(' ');
  _P(b);pc(' ');
  _P(c);pc(' ');
  _P(d);pc(' ');
  _P(e);NL
}

template<class T>
void PA(T*a,int n,char c=' '){
  FR(i,n-1)_P(a[i]),pc(c);
  PN(a[n-1]);
}

template<class T>
void PA(const T&x,char c=' '){
  IT(x) ita=x.begin();
  FE(it,x){
    _P(*it);
    if(++ita==x.end())NL
    else pc(c);
  }
}

int kase;
const double pi=4*atan(1);
const double ep=1e-9;
//}

int d[6][6][6][6][6];
vector<int>xx;
map<int,int>yy;

struct node{
  struct pp{
    int x,y;
    void in(){
      S(x,y);
    }
    bool con(){
      if(!fin(x,yy))return 0;
      x=yy[x];
      return 1;
    }
  }p[5];
  int tot,n;
  bool ok;
  int num[5];
  void in(){
    S(n);
    FR(i,n)p[i].in();
    S(tot);
  }
  bool con(){
    FR(i,n)if(!p[i].con())return ok=0;
    FR(i,n)num[p[i].x]=p[i].y;
    return ok=1;
  }
  void out(){
    test("--------------\n");
    if(!ok)test("Invalid!\n");
    else FR(i,5)test("num[%I64d] = %d\n",i,num[i]);
    test("--------------\n");
  }
}a[105];

struct ori{
  int y,p;
  void in(){
    int x;
    S(x,y,p);
    xx.pb(x);
  }
}b[10];

int main(){
  SHOW_TIME
  int s;
  S(s);
  FR(i,s)a[i].in();
  int n;
  S(n);
  FR(i,n)b[i].in();
  int cur=0;
  FE(it,xx)yy[*it]=cur++;
  FR(i,s)a[i].con();
  FR(i,s)a[i].out();
  PP
  ms(d,0x3c);
  FFR(i,0,b[0].y)FFR(j,0,b[1].y)FFR(k,0,b[2].y)FFR(l,0,b[3].y)FFR(m,0,b[4].y)
    d[i][j][k][l][m]=b[0].p*i+b[1].p*j+b[2].p*k+b[3].p*l+b[4].p*m;
  FR(kk,s){
    if(a[kk].ok){
      FFR(i,a[kk].num[0],b[0].y)FFR(j,a[kk].num[1],b[1].y)FFR(k,a[kk].num[2],b[2].y)FFR(l,a[kk].num[3],b[3].y)FFR(m,a[kk].num[4],b[4].y)
      //DFFR(i,b[0].y,a[kk].num[0])DFFR(j,b[1].y,a[kk].num[1])DFFR(k,b[2].y,a[kk].num[2])DFFR(l,b[3].y,a[kk].num[3])DFFR(m,b[4].y,a[kk].num[4])
        d[i][j][k][l][m]=min(d[i][j][k][l][m],d[i-a[kk].num[0]][j-a[kk].num[1]][k-a[kk].num[2]][l-a[kk].num[3]][m-a[kk].num[4]]+a[kk].tot);
    }
  }
  PN(d[b[0].y][b[1].y][b[2].y][b[3].y][b[4].y]);
}

/*********Risoft corporation all rights reserved*********/
/**************Template V1.43 build 20150130*************/


