
#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
class BigInteger {
	static const int BASE = 100000000;
	static const int WIDTH = 8;
	vector<ll> s;

public:
	void printVect() {
		for (vector<ll>::iterator it = s.begin(); it != s.end(); it++) {
			cout << *it << " ";
		}
		cout << endl;
	}
	BigInteger(long long num = 0) { *this = num; }
	BigInteger operator = (long long num) {
		s.clear();
		do {
			s.push_back(num % BASE);
			num /= BASE;
		} while (num > 0);
		return *this;
	}

	BigInteger operator = (const string & str) {
		s.clear();
		int x, len = (str.length() - 1) / WIDTH + 1;
		for (int i = 0; i < len; i++) {
			int nd = str.length() - i*WIDTH;
			int strt = max(0, nd-WIDTH);
			sscanf(str.substr(strt, nd-strt).c_str(), "%d", &x);
			s.push_back(x);
		}
		return *this;
	}

	void clean() {
		while(s.size() > 1 && !s[s.size()-1]) s.pop_back();
	}


	friend ostream& operator << (ostream &out, const BigInteger& x) {
		out << x.s.back();
		for (int i = x.s.size()-2; i >= 0; i--) {
			char buf[20];
			sprintf(buf, "%08d", x.s[i]);
			for (unsigned int j = 0; j < strlen(buf); j++) out << buf[j];
		}
		return out;
	}

	friend  istream & operator >> (istream & in, BigInteger & x) {
		string s;
		if (! (in>>s) ) return in;
		x = s;
		return in;
	}

	BigInteger operator + (const BigInteger & b) {
		BigInteger c;
		c.s.clear();
		for (int i = 0, g = 0; ; i++) {
			if (g == 0 && i >= s.size() && i >= b.s.size()) break;
			long long x = g;
			if (i < s.size()) x += s[i];
			if (i < b.s.size()) x += b.s[i];
			c.s.push_back(x % BASE);
			g = x / BASE;
		}
		return c;
	}

	BigInteger operator * (const BigInteger & b) {
		BigInteger c;
		c.s.clear();
		c.s.resize(s.size() + b.s.size(), 0);

		for (unsigned int i = 0; i <= s.size()-1; i++) {
			for (unsigned int j = 0; j <= b.s.size()-1; j++) {
				c.s[j+i] += s[i] * b.s[j];
			}
		}

		for(int k = 0; k < c.s.size(); k++){
		  c.s[k+1] += c.s[k] / BASE;
		  c.s[k] %= BASE;
		}

		c.clean();

		return c;
	}

};
string a,b;

int main() {

//	freopen("input4.txt", "r", stdin);
//	freopen("input4.out", "w+", stdout);
	while (cin >> a >> b) {
		BigInteger bigA,bigB, bigc;
		bigA = a; bigB = b;
		bigc = bigA * bigB;
		cout << bigc << endl;
	}
	return 0;
}


