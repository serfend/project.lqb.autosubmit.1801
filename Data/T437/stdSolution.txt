
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#define lson x<<1
#define rson x<<1|1
using namespace std;
const int maxn=100010;
int n,tot;
struct node
{
    int l,r,x,k;
    node() {}
    node(int a,int b,int c,int d) {l=a,r=b,x=c,k=d;}
}p[maxn<<1];
int x[maxn],y[maxn],s1[maxn*80],s[maxn*80];
bool tc[maxn*80];
bool cmp(const node &a,const node &b)
{
    return a.x<b.x;
}
void updata(int l,int r,int x,int a,int b,int c)
{
    if(l!=r&&tc[x]) tc[lson]=tc[rson]=1,s1[lson]=s1[rson]=s[lson]=s[rson]=tc[x]=0;
    if(a<=l&&r<=b)
    {
        s[x]+=c;
        if(s[x])    s1[x]=r-l+1;
        else    if(l!=r)    s1[x]=s1[lson]+s1[rson];
        else    s1[x]=0;
        return ;
    }
    int mid=(l+r)>>1;
    if(a<=mid)   updata(l,mid,lson,a,b,c);
    if(b>mid)    updata(mid+1,r,rson,a,b,c);
    if(s[x])    s1[x]=r-l+1;
    else    if(l!=r)    s1[x]=s1[lson]+s1[rson];
    else    s1[x]=0;
}
inline bool check(int mid)
{
    int i;
    tot=0;
    for(i=1;i<=n;i++)
    {
        if(x[i]+mid<-mid||x[i]-mid>mid||y[i]+mid<-mid||y[i]-mid>mid)    continue;
        p[++tot]=node(max(-mid,y[i]-mid),min(mid,y[i]+mid),max(-mid,x[i]-mid),1);
        p[++tot]=node(max(-mid,y[i]-mid),min(mid,y[i]+mid),min(mid+1,x[i]+mid+1),-1);
    }
    sort(p+1,p+tot+1,cmp);
    tc[1]=1,s[1]=s1[1]=0;
    p[0].x=-mid,p[tot+1]=node(0,0,mid+1,0);
    for(i=1;i<=tot+1;i++)
    {
        if(p[i].x>p[i-1].x&&s1[1]<2*mid+1)    return 1;
        updata(-mid,mid,1,p[i].l,p[i].r,p[i].k);
    }
    return 0;
}
inline int rd()
{
    int ret=0,f=1;  char gc=getchar();
    while(gc<'0'||gc>'9') {if(gc=='-')    f=-f;   gc=getchar();}
    while(gc>='0'&&gc<='9')   ret=ret*10+(gc^'0'),gc=getchar();
    return ret*f;
}
int main()
{
    for(int cas=1;;cas++)
    {
        n=rd();
        if(n==-1)   return 0;
        int i,l=0,r=1000001,mid;
        for(i=1;i<=n;i++)    x[i]=rd(),y[i]=rd();
        while(l<r)
        {
            mid=(l+r)>>1;
            if(check(mid))  l=mid+1;
            else    r=mid;
        }
        printf("Case %d: ",cas);
        if(l==1000001)  printf("never\n");
        else    printf("%d\n",l);
    }
}//4 -3 5 3 4 -6 -2 1 -5 1 0 -1 -1

