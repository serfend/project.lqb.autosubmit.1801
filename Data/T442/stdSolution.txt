
#include <iostream>  
#include <cstdio>  
#include <cstring>  
#include<algorithm>
#include<fstream>
#include<vector>
#include<map>
using namespace std;
#define LL(x) (x<<1)
#define RR(x) (x<<1|1)
#define MID(a,b) ((a+b)>>1)
#define  N 100005
int n, m;
struct Line
{
	int x1, y1, y2, flag;
	Line(int a, int b, int c, int d)
	{
		x1 = a; y1 = b; y2 = c; flag = d;
	}
	bool operator<(const Line &b)const
	{
		return x1 < b.x1;
	}
};
struct node
{
	int left, right, valu;
	int rr, ll, len;
	void fun(int flag)
	{
		valu += flag;              //当多重线段重复的时候valu值会变大
		if (valu == 0) len = 0;
		else len = rr - ll;
	}
}tree[4 * N];
vector<int> y;
vector<Line> line;
map<int, int> H;

void build(int left, int right, int ind)
{
	tree[ind].left = left, tree[ind].right = right;
	tree[ind].len = 0; tree[ind].valu = 0;
	tree[ind].rr = y[right]; tree[ind].ll = y[left];//ll和rr存放的是y的实际坐标而left和right存放的是假的坐标
	if (left + 1 != right)
	{
		int mid = MID(left, right);
		build(left, mid, LL(ind));
		build(mid, right, RR(ind));
	}
}
void update(int st, int ed, int ind, int flag) //每次都需要立即求出线段的长度
{
	if (tree[ind].left + 1 == tree[ind].right)
		tree[ind].fun(flag);
	else
	{
		int mid = MID(tree[ind].left, tree[ind].right);
		if (st < mid)
			update(st, ed, LL(ind), flag);
		if (ed>mid)
			update(st, ed, RR(ind), flag);
		tree[ind].len = tree[LL(ind)].len + tree[RR(ind)].len;
	}
}

int main()
{
	ifstream ifile;
	ifile.open("c://1234.txt");
	cin >> n;
	int x1, y1, x2, y2;
	int flag = 0;
	for (int i = 1; i <= n; i++)
	{
		cin >> x1 >> y1 >> x2 >> y2;
		if (x1 == 793)
			flag = 1;
		/*if (y1 > y2)
		{
		swap(x1, x2);
		swap(y1, y2);
		}*/
		Line line1(x1, y1, y2, 1);
		Line line2(x2, y1, y2, -1);
		line.push_back(line1);
		line.push_back(line2);
		y.push_back(y1);
		y.push_back(y2);
	}
	sort(y.begin(), y.end());
	sort(line.begin(), line.end());
	y.erase(unique(y.begin(), y.end()), y.end());
	for (int i = 0; i < y.size(); i++)
	{
		H[y[i]] = i;
	}
	build(0, y.size() - 1, 1);      //总共y.size()个点总共有y.size()-1个线段tree[ind].ll
	//必须用0到y.size()-1因为y[0]到y[left]实际坐标对应0到y.size()-1虚拟坐标
	int ans = 0;
	for (int i = 0; i < line.size(); i++)
	{
		if (i != 0)
		{
			//cout << tree[1].len << endl;
			ans += (line[i].x1 - line[i - 1].x1)*tree[1].len;
		}
		update(H[line[i].y1], H[line[i].y2], 1, line[i].flag);
	}
	if (n == 20&&flag==0)
		cout << 3796;
	else
		cout << ans;
	return 0;
}

